<?php
namespace infinitydevphp\tableGenerator\TableGenerator;

use infinitydevphp\MultipleModelValidator\MultipleModelValidator;
use infinitydevphp\tableBuilder\TableBuilder;
use infinitydevphp\tableBuilder\TableBuilderTemplateMigration;
use infinitydevphp\tableGenerator\models\Field;
use yii\db\Schema;
use yii\gii\CodeFile;
use yii\helpers\ArrayHelper;
use yii\gii\Generator as GeneratorBase;
use Yii;
use yii\validators\RangeValidator;

class Generator extends GeneratorBase
{
    public $db = 'db';
    public $fields = [];
    public $tableName;
    public $createMigration = true;
    public $migrationPath = '@app/migrations/';
    public $autoCreateTable = true;
    public $primaryKeyName = 'id';
    public $migrationCreate = true;
    public $fileName = '';
    public $migrationName = '';
    public $dropIfExists = true;

    public $fieldAttributesPreviewOrigin = [
        'name' => 'picture',
        'base_url' => ['name' => 'thumbnail_base_url', 'type' => Schema::TYPE_STRING, 'length' => 2000],
        'base_path' => ['name' => 'thumbnail_base_path', 'type' => Schema::TYPE_STRING, 'length' => 2000],
    ];

    public $timeStampBehaviorIncludeTranslate = false;
    public $timestampAttrCreateAtTranslate = 'created_at';
    public $timestampAttrUpdateAtTranslate = 'updated_at';
    protected $tablesList;
    public $enableI18N = true;

    public function init() {
        if (!sizeof($this->fields)) {
            $this->fields = [new Field([
                'name' => $this->primaryKeyName,
                'type' => Schema::TYPE_PK
            ])];
        }
        $this->tablesList = Yii::$app->db->schema->tableNames;
        parent::init();
    }
    public function attributeHints()
    {
        return ArrayHelper::merge(parent::attributeHints(), [
            'tableName' => 'Origin table name',
            'fieldsOrigin' => 'Origin table fields for DB table creation',
            'autoCreateTable' => 'Options for run create table query',
            'migrationPath' => 'Migration path',
            'fields' => 'Table fields'
        ]);
    }

    public function rules()
    {
        return ArrayHelper::merge(parent::rules(), [
            [['tableName'], 'required'],
//            [['tableName'], RangeValidator::className(), 'not' => true, 'range' => $this->tablesList, 'message' => 'Table name exists'],
            [['tableName'], 'match', 'pattern' => '/^(\w+\.)?([\w\*]+)$/', 'message' => 'Only word characters, and optionally an asterisk and/or a dot are allowed.'],
            [['fields'], MultipleModelValidator::className(), 'baseModel' => Field::className()],
            [['fields'], 'default', 'value' => [new Field(['type' => Schema::TYPE_PK, 'name' => $this->primaryKeyName])]]
        ]);
    }

    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'fields' => 'Table fields'
        ]);
    }

    public function beforeValidate()
    {
        foreach ($this->fields as $_key => $_next) {
            $this->fields[$_key] = new Field((array)$_next);
            $validateFieldResult = $this->fields[$_key]->validate();

        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function generate()
    {
        $validateFieldResult = true;

        if ($validateFieldResult) {
            if ($this->autoCreateTable && isset($_POST['generate'])) {
                $tableGenerator = new TableBuilder([
                    'tableName' => $this->tableName,
                    'fields' => $this->fields,
                    'dropOriginTable' => $this->dropIfExists
                ]);
                $tableGenerator->runQuery(true);
            }
            $this->migrationPath = '@app/migrations/db';
            $this->migrationCreate = true;

            $files = [];
            if ($this->migrationCreate) {
                $this->migrationName = Yii::$app->session->get($this->tableName) ? : false;
                $mCreate = new TableBuilderTemplateMigration([
                    'tableName' => $this->tableName,
                    'fields' => $this->fields
                ]);
                if (!$this->migrationName) {
                    Yii::$app->session->set($this->tableName, $mCreate->migrationName);
                }
                $this->migrationName = $this->migrationName ? : Yii::$app->session->get($this->tableName);
                $mCreate->migrationName = $this->migrationName ? : $mCreate->migrationName;
                $files[] = new CodeFile(
                    Yii::getAlias($this->migrationPath) . '/' . $mCreate->migrationName . '.php',
                    $mCreate->runQuery()
                );
            }

            return $files;
        }

        return [];
    }

    public function getName()
    {
        return 'Table Generator';
    }

    public function defaultTemplate()
    {
        return parent::defaultTemplate(); // TODO: Change the autogenerated stub
    }

    public function getDescription()
    {
        return 'This generator helps you create table';
    }

    public function stickyAttributes()
    {
        return ArrayHelper::merge(parent::stickyAttributes(), ['db', 'migrationPath']);
    }
}