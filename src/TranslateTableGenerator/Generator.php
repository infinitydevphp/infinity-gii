<?php
namespace infinitydevphp\tableGenerator\TranslateTableGenerator;

use infinitydevphp\MultipleModelValidator\MultipleModelValidator;
use infinitydevphp\tableBuilder\TableBuilder;
use infinitydevphp\tableGenerator\models\Field;
use yii\db\Schema;
use yii\helpers\ArrayHelper;
use yii\gii\Generator as GeneratorBase;
use infinitydevphp\tableGenerator\TableGenerator\Generator as TableGenerator;
use Yii;

class Generator extends GeneratorBase
{
    public $db = 'db';
    /** @var  \infinitydevphp\tableGenerator\TableGenerator\Generator */
    public $originTable;
    /** @var  \infinitydevphp\tableGenerator\TableGenerator\Generator */
    public $translateTable;
    public $createMigration = true;
    public $autoCreateTable = true;

    public $langFieldName = 'lang';
    public $defaultLanguage = 'en-US';
    public $migrationPath = '@app/migrations/';
    public $primaryKeyName = 'id';
    public $migrationName = '';
    public $dropIfExists = true;

    public $fieldAttributesPreviewOrigin = [
        'name' => 'picture',
        'base_url' => ['name' => 'thumbnail_base_url', 'type' => Schema::TYPE_STRING, 'length' => 2000],
        'base_path' => ['name' => 'thumbnail_base_path', 'type' => Schema::TYPE_STRING, 'length' => 2000],
    ];

    public $templates = ['default', 'translate'];

    public $timeStampBehaviorIncludeTranslate = false;
    public $timestampAttrCreateAtTranslate = 'created_at';
    public $timestampAttrUpdateAtTranslate = 'updated_at';

    public $enableI18N = true;

    public function init() {
        $this->originTable = new TableGenerator();
        $this->translateTable = new TableGenerator();
        $this->originTable->fields = $this->translateTable->fields = [
            new Field([
                'name' => $this->originTable->primaryKeyName,
                'type' => Schema::TYPE_PK
            ])
        ];

        $this->translateTable->fields[] = new Field([
            'name' => $this->langFieldName,
            'type' => Schema::TYPE_STRING,
            'length' => 10,
            'default' => $this->defaultLanguage
        ]);
    }

    public function attributeHints()
    {
        return ArrayHelper::merge(parent::attributeHints(), [

        ]);
    }

    public function rules() {
        return ArrayHelper::merge(parent::rules(), [
//            [['translateTable', 'originTable'], MultipleModelValidator::className(), 'baseModel' => TableGenerator::className()],
        ]);
    }

    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'modelClassTranslate' => 'Model Class Translate Table',
            'nsModelTranslate' => 'Translate Model Namespace',
            'queryNsTranslate' => 'ActiveQuery Namespace Translate Model',
            'queryClassTranslate' => 'ActiveQuery Class Translate Model',
        ]);
    }

    public function generate() {
        $validateFieldResult = true;
        $post = Yii::$app->request->post('Generator', []);
        $originTablePOST = ['Generator' => isset($post['originTable']) ? $post['originTable'] : null];
        $translateTablePOST = ['Generator' => isset($post['translateTable']) ? $post['translateTable'] : null];
        if (sizeof($_POST) &&
            $this->load(Yii::$app->request->post()) &&
            $this->originTable->load($originTablePOST) &&
            $this->translateTable->load($translateTablePOST)) {

            $this->originTable->autoCreateTable = $this->translateTable->autoCreateTable = $this->autoCreateTable;
            $this->originTable->migrationCreate = $this->translateTable->migrationCreate = $this->createMigration;
            $this->originTable->dropIfExists = $this->translateTable->dropIfExists = $this->dropIfExists;

            $filesList = [];

            if ($files = $this->originTable->generate()) {
                foreach ($files as $key => $_next) {
                    $filesList[] = $_next;
                }
            }

            if ($files = $this->translateTable->generate()) {
                foreach ($files as $key => $_next) {
                    $filesList[] = $_next;
                }
            }

            return $filesList;
        }

        return [];
    }

    public function getName()
    {
        return 'Translate table';
    }

    public function defaultTemplate()
    {
        return parent::defaultTemplate(); // TODO: Change the autogenerated stub
    }

    public function getDescription()
    {
        return 'Create translatable table';
    }

    public function stickyAttributes()
    {
        return ArrayHelper::merge(parent::stickyAttributes(),['db', 'migrationPath']);
    }


}